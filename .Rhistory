# Set the initial value for calculating the stem height of each disc
TreeH <- seq(1, length(stemdj) - 2, 1)
x <- ceiling(max(stemdj / Ageclass))
for (k in seq(1, x - 1, 1)) {
ind <- which(stemdata1[, stemj + k] == 0.00)[1]
# Calculate tree heights at a given age using Ratio method
Hitemp <- stemdata1$stemheight[ind - 1] +
((stemdata1[ind - 1, stemj + k]) /
(stemdata1[ind - 1, stemj + k - 1])) *
(stemdata1$stemheight[ind] - stemdata1$stemheight[ind - 1])
TreeH[k] <- Hitemp
# Draw the lateral surface of the individual logs
for (i in seq(1, ind - 2)) {
lines(c(stemdata1[i, (stemj + k)] / 20,
stemdata1[i + 1, (stemj + k)] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i + 1]),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1[i, (stemj + k)] / 20,
-stemdata1[i + 1, (stemj + k)] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i + 1]),
lty = "solid", col = "black", lwd = 1)
}
# Draw the lateral surface of the “hidden tip” of the disc
lines(c(stemdata1[ind - 1, (stemj + k)] / 20, 0),
c(stemdata1$stemheight[ind - 1], Hitemp),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1[ind - 1, (stemj + k)] / 20, 0),
c(stemdata1$stemheight[ind - 1], Hitemp),
lty = "solid", col = "black", lwd = 1)
}
# Draw graphics for the cumulative growth
with(output$StemGrowth, plot(stemdj, DBHt, type = "b", pch = 16,
col = "forestgreen", lwd = 2, cex = 1.5,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * max(DBHt)), xlab = "Age (years)",
ylab = "DBH (cm)", las = 1, cex.lab = 1.1))
legend("topleft", "(b)", cex = 1.1, box.lty = 0)
with(output$StemGrowth, plot(stemdj, Height, type = "b", pch = 16,
col = "forestgreen", lwd = 2, cex = 1.5,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * max(Height)), xlab = "Age (years)",
ylab = "Height (m)", las = 1, cex.lab = 1.1))
legend("topleft", "(c)", cex = 1.1, box.lty = 0)
with(output$StemGrowth, plot(stemdj, Volume, type = "b", pch = 16,
col = "forestgreen", lwd = 2, cex = 1.5,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * max(Volume)), xlab = "Age (years)",
ylab = expression(paste("Volume (m"^"3", ")")),
las = 1, cex.lab = 1.1))
legend("topleft", "(d)", cex = 1.1, box.lty = 0)
# Draw graphics for the mean annual increment and current annual increment
with(output$StemGrowth, plot(stemdj, AnincreD, type = "l", lty = "dashed", pch = 16,
col = "blue", lwd = 2, cex = 1.2,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * (max(max(AnincreD), max(AvincreD)))),
xlab = "Age (years)",
ylab = expression(paste
("DBH increment (cm", " year"^"-1", ")")),
las = 1, cex.lab = 1.1))
with(output$StemGrowth, lines(stemdj, AvincreD, lty = "dotted", pch = 16,
col = "red", lwd = 2, cex = 1.2))
legend("topleft", "(e)", cex = 1.1, box.lty = 0)
legend("topright",
col = c("blue", "red"), cex = 1, box.lty = 0, lwd = 2,
lty = c("dashed", "dotted"), bg = NULL,
c("Current annual increment", "Mean annual increment")
)
with(output$StemGrowth, plot(stemdj, AnincreH, type = "l", lty = "dashed", pch = 1,
col = "blue", lwd = 2, cex = 1.2,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * (max(max(AnincreH), max(AvincreH)))),
xlab = "Age (years)",
ylab = expression(paste
("Height increment (m", " year"^"-1", ")")),
las = 1, cex.lab = 1.1))
with(output$StemGrowth, lines(stemdj, AvincreH, lty = "dotted", pch = 16,
col = "red", lwd = 2, cex = 1.2))
legend("topleft", "(f)", cex = 1.1, box.lty = 0)
with(output$StemGrowth, plot(stemdj, AnincreV, type = "l", lty = "dashed", pch = 1,
col = "blue", lwd = 2, cex = 1.2,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * (max(max(AnincreV), max(AvincreV)))),
xlab = "Age (years)",
ylab = expression(paste
("Volume increment (m"^"3", " year"^"-1", ")"),
las = 1, cex.lab = 1.1)))
with(output$StemGrowth, lines(stemdj, AvincreV, lty = "dotted", pch = 16,
col = "red", lwd = 2, cex = 1.2))
legend("topleft", "(g)", cex = 1.1, box.lty = 0)
}
# Whether to call the stemgrowth graph
if (stemgrowth == TRUE) {
drawStemgrowth()
}
#####################################################################
#define calCarbon() function
calCarbon <- function(parameterdata, BEFdata){
# Check if there a parameterdata exists
if(!missing(parameterdata)){
# Combined tree growth trend data and carbon storage data
Mydata2 <- data.frame(output$StemGrowth, output$allomCarbon)
# Open a new graph frame
dev.new(title =
"tree biomass and carbon storage estimated by allometric models",
width = 4500, height = 2250, noRStudioGD = TRUE)
# Define the parameters of graph
mat <- matrix(c(1,2),1,2,byrow=FALSE)
#mat
layout(mat)
layout.show(2)
par(oma=c(0,0,0,0),mar=c(5,5,5,1))
# Draw a graph for tree biomass and carbon storage across tree age
# The changes in tree biomass across tree age
with(Mydata2, plot(stemdj, total_biomass, type="b", lty=1, lwd=2, pch = 19,
col = "blue", cex.axis=1.5, cex.lab=1.8,cex = 2,
xlim = c(0, max(stemdj)+Ageclass),
ylim = c(0, 1.2*(max(total_biomass))),
xlab = "Age (years)",
ylab = "Total tree biomass (kg)",las=1))
legend("topleft", "(a)", cex = 1.8, box.lty = 0)
legend("topright", cex = 1.8, box.lty = 0, bg=NULL,
c("Estimated by allometric models"))
# The changes in carbon storage across tree age
with(Mydata2, plot(stemdj, total_C, type="b", lty=1, lwd=2,pch = 19,
col = "blue", cex.axis=1.5,cex.lab=1.8,cex = 2,
xlim = c(0, max(stemdj)+Ageclass),
ylim = c(0, 1.2*(max(max(total_C)))),
xlab = "Age (years)",
ylab = "Total tree C storage (kg)", las=1))
legend("topleft", "(b)", cex = 1.8, box.lty = 0)
legend("topright", cex = 1.8, box.lty = 0, bg=NULL,
c("Estimated by allometric models"))
}
# Check if there a BEFdata exists
if(!missing(BEFdata)){
# Combined tree growth trend data and carbon storage data
Mydata3 <- data.frame(output$StemGrowth, output$volumeCarbon)
# Open a new graph frame
dev.new(title =
"tree biomass and carbon storage estimated by volume model",
width = 4500, height = 2250, noRStudioGD = TRUE)
# Define the parameters of graph
mat <- matrix(c(1,2),1,2,byrow=FALSE)
# mat
layout(mat)
layout.show(2)
par(oma=c(0,0,0,0),mar=c(5,5,5,1))
# Draw a graph for tree biomass and carbon storage across tree age
# The changes in tree biomass across tree age
with(Mydata3, plot(stemdj, total_bio, type="b", lty=1, lwd=2, pch = 19,
col = "blue", cex.axis=1.5, cex.lab=1.8,cex = 2,
xlim = c(0, max(stemdj)+Ageclass),
ylim = c(0, 1.2*(max(total_bio))),
xlab = "Age (years)",
ylab = "Total tree biomass (kg)",las=1))
legend("topleft", "(a)", cex = 1.8, box.lty = 0)
legend("topright", cex = 1.8, box.lty = 0, bg=NULL,
c("Estimated by volume model"))
# The changes in carbon storage across tree age
with(Mydata3, plot(stemdj, total_Carbon, type="b", lty=1, lwd=2,pch = 19,
col = "blue", cex.axis=1.5,cex.lab=1.8,cex = 2,
xlim = c(0, max(stemdj)+Ageclass),
ylim = c(0, 1.2*(max(max(total_Carbon)))),
xlab = "Age (years)",
ylab = "Total tree C storage (kg)", las=1))
legend("topleft", "(b)", cex = 1.8, box.lty = 0)
legend("topright", cex = 1.8, box.lty = 0, bg=NULL,
c("Estimated by volume model"))
}
}
# Whether to call the treecarbon graph
if (treecarbon == TRUE) {
calCarbon(parameterdata, BEFdata)
}
###############################################################
# Define allomHD() function
allomHD <- function() {
# Open a new graph frame
dev.new(title = "height-diameter relationships",
width = 4500, height = 2250, noRStudioGD = TRUE)
# Define the parameters of graph
mat <- matrix(c(1, 2), 1, 2, byrow = FALSE)
# mat
layout(mat)
layout.show(2)
par(oma = c(0, 0, 0, 0), mar = c(5, 5, 1, 1))
# Extract sub-datasets with tree height greater than 1.3 m
Mydata <- subset(output$StemGrowth, Height >= 1.3)
# Draw a scatter plot
plot(Mydata$DBHt, Mydata$Height,
pch = 21, bg = "purple",
cex.axis = 1.5, cex.lab = 1.8, cex = 3,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height)),
xlab = "Tree DBH (cm)", ylab = "Tree height (m)", las = 1
)
# Develop Chapman-Richards model
theta_richards <- lmfor::startHDrichards(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDrichards <- nls(Height ~ 1.3 + a * (1 - exp(-b * DBHt))^c,
control = nlc,
start = list(a = theta_richards[1],
b = theta_richards[2],
c = theta_richards[3]), data = Mydata)
summary(HDrichards)
xv1_richards <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_richards <- predict(HDrichards, list(DBHt = xv1_richards))
lines(xv1_richards, yv1_richards, col = "orangered", lwd = 3)
SSre_richards <- sum(residuals(HDrichards)^2)
SStot_richards <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_richards <- 1 - SSre_richards / SStot_richards
R2_richards
N <- nrow(Mydata)
RMSE_richards <- sqrt(sum(residuals(HDrichards)^2) / (N - 2))
RMSE_richards
# Develop Logistic model
theta_logistic <- lmfor::startHDlogistic(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDlogistic <- nls(Height ~ 1.3 + a / (1 + b * exp(-c * DBHt)),
control = nlc,
start = list(a = theta_logistic[1],
b = theta_logistic[2],
c = theta_logistic[3]), data = Mydata)
summary(HDlogistic)
xv1_logistic <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_logistic <- predict(HDlogistic, list(DBHt = xv1_logistic))
lines(xv1_logistic, yv1_logistic, col = "blue", lwd = 3)
SSre_logistic <- sum(residuals(HDlogistic)^2)
SStot_logistic <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_logistic <- 1 - SSre_logistic / SStot_logistic
R2_logistic
N <- nrow(Mydata)
RMSE_logistic <- sqrt(sum(residuals(HDlogistic)^2) / (N - 2))
RMSE_logistic
# Develop Weibull model
theta_weibull <- lmfor::startHDweibull(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDweibull <- nls(Height ~ 1.3 + a * (1 - exp(-b * DBHt^c)), control = nlc,
start = list(a = theta_weibull[1],
b = theta_weibull[2],
c = theta_weibull[3]), data = Mydata)
summary(HDweibull)
xv1_weibull <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_weibull <- predict(HDweibull, list(DBHt = xv1_weibull))
lines(xv1_weibull, yv1_weibull, col = "forestgreen", lwd = 3)
SSre_weibull <- sum(residuals(HDweibull)^2)
SStot_weibull <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_weibull <- 1 - SSre_weibull / SStot_weibull
R2_weibull
N <- nrow(Mydata)
RMSE_weibull <- sqrt(sum(residuals(HDweibull)^2) / (N - 2))
RMSE_weibull
# Develop gomperz model
theta_gomperz <- lmfor::startHDgomperz(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDgomperz <- nls(Height ~ 1.3 + a * exp(-b * exp(-c * DBHt)),
control = nlc,
start = list(a = theta_gomperz[1],
b = theta_gomperz[2],
c = theta_gomperz[3]), data = Mydata)
summary(HDgomperz)
xv1_gomperz <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_gomperz <- predict(HDgomperz, list(DBHt = xv1_gomperz))
lines(xv1_gomperz, yv1_gomperz, col = "gold", lwd = 3)
SSre_gomperz <- sum(residuals(HDgomperz)^2)
SStot_gomperz <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_gomperz <- 1 - SSre_gomperz / SStot_gomperz
R2_gomperz
N <- nrow(Mydata)
RMSE_gomperz <- sqrt(sum(residuals(HDgomperz)^2) / (N - 2))
RMSE_gomperz
legend("topright", "(a)", cex = 1.2, box.lty = 0)
legend("topleft",
cex = 1.5, lwd = 2.5,
legend = c("HDrichards", "HDlogistic", "HDgomperz", "HDweibull"),
lty = 1, col = c("orangered", "blue", "forestgreen", "gold"),
title = "Models"
)
# Filter the model providing the best fit
min_Res <- min(anova(HDrichards, HDlogistic, HDgomperz, HDweibull)[2])
HDrichards_Res <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[1, 2]
HDlogistic_Res <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[2, 2]
HDweibull_Res <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[3, 2]
HDgomperz_Res <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[4, 2]
if (min_Res == HDrichards_Res) {
plot(Mydata$DBHt, Mydata$Height,
pch = 21, bg = "purple",
cex.axis = 1.5, cex.lab = 1.8, cex = 3,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height)),
xlab = "Tree DBH (cm)", ylab = "Tree height (m)", las = 1
)
lines(xv1_richards, yv1_richards, col = "orangered", lwd = 3)
legend("topright", "(b)", cex = 1.2, box.lty = 0)
legend("topleft", cex = 1.5,
legend = c(expression(paste(italic(R)^2 == "")),
expression(paste(italic(RMSE) == "")),
round(R2_richards, 3), round(RMSE_richards, 3)),
title = "Associated statistics", ncol = 2)
legend("bottomright",
cex = 1.5,
legend = c(
"a =", "b =", "c =",
round(summary(HDrichards)$parameters[1], 3),
round(summary(HDrichards)$parameters[2], 3),
round(summary(HDrichards)$parameters[3], 3)
),
title = "HDrichards Parameters",
ncol = 2
)
} else if (min_Res == HDlogistic_Res) {
plot(Mydata$DBHt, Mydata$Height,
pch = 21, bg = "purple",
cex.axis = 1.5, cex.lab = 1.8, cex = 3,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height)),
xlab = "Tree DBH (cm)", ylab = "Tree height (m)", las = 1
)
lines(xv1_logistic, yv1_logistic, col = "blue", lwd = 3)
legend("topright", "(b)", cex = 1.2, box.lty = 0)
legend("topleft", cex = 1.5,
legend = c(expression(paste(italic(R)^2 == "")),
expression(paste(italic(RMSE) == "")),
round(R2_logistic, 3), round(RMSE_logistic, 3)),
title = "Associated statistics", ncol = 2)
legend("bottomright",
cex = 1.5,
legend = c(
"a =", "b =", "c =",
round(summary(HDlogistic)$parameters[1], 3),
round(summary(HDlogistic)$parameters[2], 3),
round(summary(HDlogistic)$parameters[3], 3)
),
title = "HDlogistic Parameters",
ncol = 2
)
} else if (min_Res == HDgomperz_Res) {
plot(Mydata$DBHt, Mydata$Height,
pch = 21, bg = "purple",
cex.axis = 1.5, cex.lab = 1.8, cex = 3,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height)),
xlab = "Tree DBH (cm)", ylab = "Tree height (m)", las = 1
)
lines(xv1_gomperz, yv1_gomperz, col = "gold", lwd = 3)
legend("topright", "(b)", cex = 1.2, box.lty = 0)
legend("topleft",
cex = 1.5,
legend = c(expression(paste(italic(R)^2 == "")),
expression(paste(italic(RMSE) == "")),
round(R2_gomperz, 3), round(RMSE_gomperz, 3)),
title = "Associated statistics", ncol = 2
)
legend("bottomright",
cex = 1.5,
legend = c(
"a =", "b =", "c =",
round(summary(HDgomperz)$parameters[1], 3),
round(summary(HDgomperz)$parameters[2], 3),
round(summary(HDgomperz)$parameters[3], 3)
),
title = "HDgomperz Parameters",
ncol = 2
)
} else if (min_Res == HDweibull_Res) {
plot(Mydata$DBHt, Mydata$Height,
pch = 21, bg = "purple",
cex.axis = 1.5, cex.lab = 1.8, cex = 3,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height)),
xlab = "Tree DBH (cm)", ylab = "Tree height (m)", las = 1
)
lines(xv1_weibull, yv1_weibull, col = "gold", lwd = 3)
legend("topright", "(b)", cex = 1.2, box.lty = 0)
legend("topleft",
cex = 1.5,
legend = c(expression(paste(italic(R)^2 == "")),
expression(paste(italic(RMSE) == "")),
round(R2_weibull, 3), round(RMSE_weibull, 3)),
title = "Associated statistics", ncol = 2
)
legend("bottomright",
cex = 1.5,
legend = c(
"a =", "b =", "c =",
round(summary(HDweibull)$parameters[1], 3),
round(summary(HDweibull)$parameters[2], 3),
round(summary(HDweibull)$parameters[3], 3)
),
title = "HDweibull parameters",
ncol = 2
)
}
}
# Whether to call the HDmodel graph
if (HDmodel == TRUE) {
allomHD()
}
return(output)
}
# Application of stemanalysism() function
stemanalysism(xtree = 8, stemgrowth = TRUE, treecarbon = TRUE,
stemdata = stemdata, parameterdata = parameterdata, BEFdata = BEFdata)
# Application of stemanalysism() function
stemanalysism(xtree = 8, stemgrowth = TRUE, treecarbon = TRUE,
stemdata = stemdata, parameterdata = parameterdata)
# Application of stemanalysism() function
stemanalysism(xtree = 8, stemgrowth = TRUE, HDmodel = TRUE,
stemdata = stemdata)
setwd("D:/20220503 stem analysis R package/StemAnalysis")
devtools::document()
rm(list = c("stemanalysism"))
devtools::document()
library(StemAnalysis)
stemgrowth <- stemanalysism(xtree = 8, treecarbon = TRUE, stemdata = stemdata, parameterdata = parameterdata)
head(output)
devtools::build_vignettes()
stemgrowth <- stemanalysism(xtree = 8, stemgrowth = TRUE, stemdata = stemdata)
head(stemgrowth)
knitr::kable(stemgrowth)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document()
library(StemAnalysis)
test_that("stem growth analysis", {
path <- system.file(stemdata, package = "StemAnalysis")
result1 <- stemanalysism(xtree = 4, stemgrowth = TRUE, output = StemGrowth, stemdata = stemdata)
result2 <- stemanalysism(xtree = 6, stemgrowth = TRUE, stemdata = stemdata)
expect_type(result1, "list")
expect_type(result2, "list")
})
devtools::document()
library(StemAnalysis)
usethis::use_git()
use_travis()
library(devtools)
use_travis()
use_github_actions()
package_coverage(
path = "C:/Users/Wu/Documents/GitHub",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
library(covr)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
devtools::test()
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
devtools::document()
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
library(covr)
library(covr)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
package_coverage(
path = "C:/Users/Wu/Documents/GitHub/StemAnalysis",
type = c("tests"),
combine_types = TRUE,
relative_path = TRUE
)
