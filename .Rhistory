BCFdata5 <- subset(BCFdata, BCFdata$DBH==">5")
BCF <- ifelse(DBH<5,
exp(log(BCFdata0$a)+BCFdata0$b*log(DBH)+BCFdata0$c*log(Height)),
exp(log(BCFdata5$a)+BCFdata5$b*log(DBH)+BCFdata5$c*log(Height)))
BCF <- as.numeric(BCF)
BCF[is.na(BCF)]=0
# Calculate RSR
Rdata <- subset(volumepardata, volumepardata$factors=="RSR")
Rdata0 <- subset(Rdata, Rdata$DBH=="<5")
Rdata5 <- subset(Rdata, Rdata$DBH==">5")
RSR <- ifelse(DBH<5,
exp(log(Rdata0$a)+Rdata0$b*log(DBH)+Rdata0$c*log(Height)),
exp(log(Rdata5$a)+Rdata5$b*log(DBH)+Rdata5$c*log(Height)))
RSR <- as.numeric(RSR)
RSR[is.na(RSR)]=0
# Calculate tree biomass using volume model
abovegroundB <- ifelse(Volume!=0,Volume*BCF*1000,Volume)
abovegroundB <- as.numeric(abovegroundB)
belowgroundB <- ifelse(Volume!=0,Volume*BCF*1000*RSR,Volume)
belowgroundB <- as.numeric(belowgroundB)
totalB <- ifelse(Volume!=0,Volume*BCF*(1+RSR)*1000,Volume)
totalB <- as.numeric(totalB)
# Calculate tree carbon storage
abovegroundC <- abovegroundB*BCFdata5$Cconcentration
abovegroundC <- as.numeric(abovegroundC)
belowgroundC <- belowgroundB*BCFdata5$Cconcentration
belowgroundC <- as.numeric(belowgroundC)
totalC <- abovegroundC+belowgroundC
totalC <- as.numeric(totalC)
# Construct data frame that contains tree biomass and tree carbon storage
treeage <- as.numeric(stemdj)
volumeCarbon <- cbind(treeage, BCF, RSR, abovegroundB, belowgroundB, totalB,
abovegroundC, belowgroundC, totalC)
volumeCarbon <- as.data.frame(volumeCarbon)
output$volumeCarbon <- round(volumeCarbon,3)
}
#######################################################
# define drawStemgrowth() function which show the stem growth trend
drawStemgrowth <- function() {
# Open a new graph frame which names as “Stem growth trend”
dev.new(title = "Stem growth trend", width = 4500,
height = 4500, noRStudioGD = TRUE)
# Define the parameters of the graph
mat <- matrix(c(1, 1, 1, 2, 3, 4, 5, 6, 7), 3, 3, byrow = FALSE)
# mat
layout(mat)
layout.show(7)
par(oma = c(0, 0, 0, 0), mar = c(5, 5, 1, 1))
# Draw the base coordinates
plot(c(0, 0), c(0, hmax), type = "l", lty = "dotted", col = "red",
lwd = 2, xlim = c(-ceiling(Dmax / 20), ceiling(Dmax / 20)),
ylim = c(0, ceiling(hmax)), ann = FALSE, axes = FALSE)
legend("topleft", "(a)", cex = 1.1, box.lty = 0, bg = NULL)
axis(1, at = seq(-ceiling(Dmax / 20), ceiling(Dmax / 20), 0.2),
lwd = 1.5, font = 1, tck = 0.02, cex = 0.4)
# Calculate the number of discs
stemi <- seq_len(length.out = length(stemdata1$stemheight))
# Draw the position lines for discs at different stem heights
for (i in stemi) {
lines(c(-stemdata1$Dwithbark[i] / 20, stemdata1$Dwithbark[i] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i]),
lty = "dotted", col = "red", lwd = 2)
}
# Draw the lateral surface with and without bark
for (i in stemi - 1) {
lines(c(stemdata1$Dwithbark[i] / 20, stemdata1$Dwithbark[i + 1] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i + 1]),
lty = "solid", col = "black", lwd = 2)
lines(c(-stemdata1$Dwithbark[i] / 20, -stemdata1$Dwithbark[i + 1] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i + 1]),
lty = "solid", col = "black", lwd = 2)
lines(c(stemdata1$ Dnobark0[i] / 20, stemdata1$ Dnobark0[i + 1] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i + 1]),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1$ Dnobark0[i] / 20, -stemdata1$ Dnobark0[i + 1] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i + 1]),
lty = "solid", col = "black", lwd = 1)
}
# Find the disc that does not reach the height of next cross-sectional disc
# Set the initial value for calculating the stem height of each disc
TreeH <- seq(1, length(stemdj) - 2, 1)
x <- ceiling(max(stemdj / Ageclass))
for (k in seq(1, x - 1, 1)) {
ind <- which(stemdata1[, stemj + k] == 0.00)[1]
# Calculate tree heights at a given age using Ratio method
Hitemp <- stemdata1$stemheight[ind - 1] +
((stemdata1[ind - 1, stemj + k]) /
(stemdata1[ind - 1, stemj + k - 1])) *
(stemdata1$stemheight[ind] - stemdata1$stemheight[ind - 1])
TreeH[k] <- Hitemp
# Draw the lateral surface of the individual logs
if(ind-2==0){
lines(c(stemdata1[1, (stemj + k)] / 20,
stemdata1[2, (stemj + k)] / 20),
c(0, stemdata1$stemheight[ind]),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1[1, (stemj + k)] / 20,
-stemdata1[2, (stemj + k)] / 20),
c(0, stemdata1$stemheight[ind]),
lty = "solid", col = "black", lwd = 1)
}else if(ind-2==1){
lines(c(stemdata1[ind-2, (stemj + k)] / 20,
stemdata1[ind-2+1, (stemj + k)] / 20),
c(stemdata1$stemheight[ind-2], stemdata1$stemheight[ind-2+1]),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1[ind-2, (stemj + k)] / 20,
-stemdata1[ind-2+1, (stemj + k)] / 20),
c(stemdata1$stemheight[ind-2], stemdata1$stemheight[ind-2+1]),
lty = "solid", col = "black", lwd = 1)
}else if(ind-2>1){
for (i in seq(1, ind - 2)) {
lines(c(stemdata1[i, (stemj + k)] / 20,
stemdata1[i+1, (stemj + k)] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i+1]),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1[i, (stemj + k)] / 20,
-stemdata1[i+1, (stemj + k)] / 20),
c(stemdata1$stemheight[i], stemdata1$stemheight[i+1]),
lty = "solid", col = "black", lwd = 1)
}
}
# Draw the lateral surface of the “hidden tip” of the disc
lines(c(stemdata1[ind - 1, (stemj + k)] / 20, 0),
c(stemdata1$stemheight[ind - 1], Hitemp),
lty = "solid", col = "black", lwd = 1)
lines(c(-stemdata1[ind - 1, (stemj + k)] / 20, 0),
c(stemdata1$stemheight[ind - 1], Hitemp),
lty = "solid", col = "black", lwd = 1)
}
# Draw graphics for the cumulative growth
with(output$StemGrowth, plot(stemdj, DBHt, type = "b", pch = 16,
col = "forestgreen", lwd = 2, cex = 1.5,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * max(DBHt)), xlab = "Age (years)",
ylab = "DBH (cm)", las = 1, cex.lab = 1.1))
legend("topleft", "(b)", cex = 1.1, box.lty = 0, bg = NULL)
with(output$StemGrowth, plot(stemdj, Height, type = "b", pch = 16,
col = "forestgreen", lwd = 2, cex = 1.5,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * max(Height)), xlab = "Age (years)",
ylab = "Height (m)", las = 1, cex.lab = 1.1))
legend("topleft", "(c)", cex = 1.1, box.lty = 0, bg = NULL)
with(output$StemGrowth, plot(stemdj, Volume, type = "b", pch = 16,
col = "forestgreen", lwd = 2, cex = 1.5,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * max(Volume)), xlab = "Age (years)",
ylab = expression(paste("Volume (m"^"3", ")")),
las = 1, cex.lab = 1.1))
legend("topleft", "(d)", cex = 1.1, box.lty = 0, bg = NULL)
# Draw graphics for the mean annual increment and current annual increment
with(output$StemGrowth, plot(stemdj, AnincreD, type = "l", lty = "dashed", pch = 16,
col = "blue", lwd = 2, cex = 1.2,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * (max(max(AnincreD), max(AvincreD)))),
xlab = "Age (years)",
ylab = expression(paste
("DBH increment (cm", " year"^"-1", ")")),
las = 1, cex.lab = 1.1))
with(output$StemGrowth, lines(stemdj, AvincreD, lty = "dotted", pch = 16,
col = "red", lwd = 2, cex = 1.2))
legend("topleft", "(e)", cex = 1.1, box.lty = 0, bg = NULL)
legend("topright",
col = c("blue", "red"), cex = 1, box.lty = 0, lwd = 2,
lty = c("dashed", "dotted"), bg = NULL,
c("Current annual increment", "Mean annual increment")
)
with(output$StemGrowth, plot(stemdj, AnincreH, type = "l", lty = "dashed", pch = 1,
col = "blue", lwd = 2, cex = 1.2,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * (max(max(AnincreH), max(AvincreH)))),
xlab = "Age (years)",
ylab = expression(paste
("Height increment (m", " year"^"-1", ")")),
las = 1, cex.lab = 1.1))
with(output$StemGrowth, lines(stemdj, AvincreH, lty = "dotted", pch = 16,
col = "red", lwd = 2, cex = 1.2))
legend("topleft", "(f)", cex = 1.1, box.lty = 0, bg = NULL)
with(output$StemGrowth, plot(stemdj, AnincreV, type = "l", lty = "dashed", pch = 1,
col = "blue", lwd = 2, cex = 1.2,
xlim = c(0, max(stemdj) + Ageclass),
ylim = c(0, 1.2 * (max(max(AnincreV), max(AvincreV)))),
xlab = "Age (years)",
ylab = expression(paste
("Volume increment (m"^"3", " year"^"-1", ")"),
las = 1, cex.lab = 1.1)))
with(output$StemGrowth, lines(stemdj, AvincreV, lty = "dotted", pch = 16,
col = "red", lwd = 2, cex = 1.2))
legend("topleft", "(g)", cex = 1.1, box.lty = 0, bg = NULL)
}
# Whether to call the stemgrowth graph
if (stemgrowth == TRUE) {
drawStemgrowth()
}
#####################################################################
#define calCarbon() function
calCarbon <- function(allompardata, volumepardata){
# Check if there a allompardata exists
if(!missing(allompardata)){
# Combined tree growth trend data and carbon storage data
Mydata2 <- data.frame(output$StemGrowth, output$allomCarbon)
# Open a new graph frame
dev.new(title =
"tree biomass and carbon storage estimated by allometric models",
width = 4500, height = 2250, noRStudioGD = TRUE)
# Define the parameters of graph
mat <- matrix(c(1,2),1,2,byrow=FALSE)
#mat
layout(mat)
layout.show(2)
par(oma=c(0,0,0,0),mar=c(5,5,1,1))
# Draw a graph for tree biomass and carbon storage across tree age
# The changes in tree biomass across tree age
with(Mydata2, plot(treeage, totalB, type="b", lty=1, lwd=2, pch = 19,
col = "blue", cex.axis=1.3, cex.lab=1.5,cex = 2,
xlim = c(0, max(treeage)+Ageclass),
ylim = c(0, 1.2*(max(totalB))),
xlab = "Age (years)",
ylab = "Total tree biomass (kg)",las=1))
legend("topleft", "(a)", cex = 1.5, box.lty = 0, bg=NULL)
legend("topright", cex = 1.5, box.lty = 0, bg=NULL,
c("Estimated by allometric models"))
# The changes in carbon storage across tree age
with(Mydata2, plot(treeage, totalC, type="b", lty=1, lwd=2,pch = 19,
col = "blue", cex.axis=1.3,cex.lab=1.5,cex = 2,
xlim = c(0, max(treeage)+Ageclass),
ylim = c(0, 1.2*(max(max(totalC)))),
xlab = "Age (years)",
ylab = "Total tree C storage (kg)", las=1))
legend("topleft", "(b)", cex = 1.5, box.lty = 0, bg=NULL)
legend("topright", cex = 1.5, box.lty = 0, bg=NULL,
c("Estimated by allometric models"))
}
# Check if there a volumepardata exists
if(!missing(volumepardata)){
# Combined tree growth trend data and carbon storage data
Mydata3 <- data.frame(output$StemGrowth, output$volumeCarbon)
# Open a new graph frame
dev.new(title =
"tree biomass and carbon storage estimated by volume model",
width = 4500, height = 2250, noRStudioGD = TRUE)
# Define the parameters of graph
mat <- matrix(c(1,2),1,2,byrow=FALSE)
# mat
layout(mat)
layout.show(2)
par(oma=c(0,0,0,0),mar=c(5,5,1,1))
# Draw a graph for tree biomass and carbon storage across tree age
# The changes in tree biomass across tree age
with(Mydata3, plot(treeage, totalB, type="b", lty=1, lwd=2, pch = 19,
col = "blue", cex.axis=1.3, cex.lab=1.5,cex = 2,
xlim = c(0, max(treeage)+Ageclass),
ylim = c(0, 1.2*(max(totalB))),
xlab = "Age (years)",
ylab = "Total tree biomass (kg)",las=1))
legend("topleft", "(a)", cex = 1.5, box.lty = 0, bg=NULL)
legend("topright", cex = 1.5, box.lty = 0, bg=NULL,
c("Estimated by volume model"))
# The changes in carbon storage across tree age
with(Mydata3, plot(treeage, totalC, type="b", lty=1, lwd=2,pch = 19,
col = "blue", cex.axis=1.3,cex.lab=1.5,cex = 2,
xlim = c(0, max(treeage)+Ageclass),
ylim = c(0, 1.2*(max(max(totalC)))),
xlab = "Age (years)",
ylab = "Total tree C storage (kg)", las=1))
legend("topleft", "(b)", cex = 1.5, box.lty = 0, bg=NULL)
legend("topright", cex = 1.5, box.lty = 0, bg=NULL,
c("Estimated by volume model"))
}
}
# Whether to call the treecarbon graph
if (treecarbon == TRUE) {
calCarbon(allompardata, volumepardata)
}
###############################################################
# Define allomHD() function
allomHD <- function() {
# Open a new graph frame
dev.new(title = "height-diameter relationships",
width = 5000, height = 5500, noRStudioGD = TRUE)
# Define the parameters of graph
mat <- matrix(c(1, 1, 2), 3, 1, byrow = FALSE)
# mat
layout(mat)
layout.show(2)
par(oma = c(0, 0, 0, 0))
par(mar = c(5, 5, 1, 1))
# Extract sub-datasets with tree height greater than 1.3 m
Mydata <- subset(output$StemGrowth, Height >= 1.3)
# Draw a scatter plot
plot(Mydata$DBHt, Mydata$Height,
pch = 21, bg = "purple",
cex.axis = 1.5, cex.lab = 1.8, cex = 3,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height)),
xlab = "Tree DBH (cm)", ylab = "Tree height (m)", las = 1
)
# Develop Chapman-Richards model
theta_richards <- lmfor::startHDrichards(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDrichards <- nls(Height ~ 1.3 + a * (1 - exp(-b * DBHt))^c,
control = nlc,
start = list(a = theta_richards[1],
b = theta_richards[2],
c = theta_richards[3]), data = Mydata)
summary(HDrichards)
xv1_richards <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_richards <- predict(HDrichards, list(DBHt = xv1_richards))
lines(xv1_richards, yv1_richards, col = "orangered", lwd = 3)
SSre_richards <- sum(residuals(HDrichards)^2)
SStot_richards <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_richards <- 1 - SSre_richards / SStot_richards
R2_richards
N <- nrow(Mydata)
RMSE_richards <- sqrt(sum(residuals(HDrichards)^2) / (N - 2))
RMSE_richards
# Develop Logistic model
theta_logistic <- lmfor::startHDlogistic(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDlogistic <- nls(Height ~ 1.3 + a / (1 + b * exp(-c * DBHt)),
control = nlc,
start = list(a = theta_logistic[1],
b = theta_logistic[2],
c = theta_logistic[3]), data = Mydata)
summary(HDlogistic)
xv1_logistic <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_logistic <- predict(HDlogistic, list(DBHt = xv1_logistic))
lines(xv1_logistic, yv1_logistic, col = "blue", lwd = 3)
SSre_logistic <- sum(residuals(HDlogistic)^2)
SStot_logistic <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_logistic <- 1 - SSre_logistic / SStot_logistic
R2_logistic
N <- nrow(Mydata)
RMSE_logistic <- sqrt(sum(residuals(HDlogistic)^2) / (N - 2))
RMSE_logistic
# Develop Weibull model
theta_weibull <- lmfor::startHDweibull(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDweibull <- nls(Height ~ 1.3 + a * (1 - exp(-b * DBHt^c)), control = nlc,
start = list(a = theta_weibull[1],
b = theta_weibull[2],
c = theta_weibull[3]), data = Mydata)
summary(HDweibull)
xv1_weibull <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_weibull <- predict(HDweibull, list(DBHt = xv1_weibull))
lines(xv1_weibull, yv1_weibull, col = "forestgreen", lwd = 3)
SSre_weibull <- sum(residuals(HDweibull)^2)
SStot_weibull <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_weibull <- 1 - SSre_weibull / SStot_weibull
R2_weibull
N <- nrow(Mydata)
RMSE_weibull <- sqrt(sum(residuals(HDweibull)^2) / (N - 2))
RMSE_weibull
# Develop gomperz model
theta_gomperz <- lmfor::startHDgomperz(d = Mydata$DBHt, h = Mydata$Height)
nlc <- nls.control(maxiter = 1000)
HDgomperz <- nls(Height ~ 1.3 + a * exp(-b * exp(-c * DBHt)),
control = nlc,
start = list(a = theta_gomperz[1],
b = theta_gomperz[2],
c = theta_gomperz[3]), data = Mydata)
summary(HDgomperz)
xv1_gomperz <- seq(0.3 * min(Mydata$DBHt), 1.1 * max(Mydata$DBHt), 0.0001)
yv1_gomperz <- predict(HDgomperz, list(DBHt = xv1_gomperz))
lines(xv1_gomperz, yv1_gomperz, col = "purple", lwd = 3)
SSre_gomperz <- sum(residuals(HDgomperz)^2)
SStot_gomperz <- sum((Mydata$Height - mean(Mydata$Height))^2)
R2_gomperz <- 1 - SSre_gomperz / SStot_gomperz
R2_gomperz
N <- nrow(Mydata)
RMSE_gomperz <- sqrt(sum(residuals(HDgomperz)^2) / (N - 2))
RMSE_gomperz
legend("topleft",
cex = 1.5, lwd = 2.5, box.lty = 0, bg = NULL,
text.col = c("orangered", "blue", "forestgreen", "purple"),
legend = c(
expression(paste
("HDrichards  H = 1.3 + a(1 - e"^"-bDBH","",")"^"c")),
expression(paste
("HDlogistic  H = 1.3 + a/(1 + be"^"-cDBH","",")")),
expression(paste
("HDweibull  H = 1.3 + a(1 - e"^"-bDBH"^"c","",")")),
expression(paste
("HDgomperz  H = 1.3 + ae"^("-be"^"-cDBH")))),
lty = 1, col = c("orangered", "blue", "forestgreen", "purple"),
title = "Models"
)
# Show the fitted statistics
# Draw a scatter plot
par(new=T)
par(oma = c(0, 0, 0, 0))
par(mar = c(0, 0, 0, 0))
plot(Mydata$DBHt, Mydata$Height,
type = "n",xaxt = "n", yaxt ="n", bty = "n", ann = FALSE,
xlim = c(0, 1.1 * max(Mydata$DBHt)),
ylim = c(0, 1.1 * max(Mydata$Height))
)
# Filter the model providing the best fit by anova
min_RSS <- min(anova(HDrichards, HDlogistic, HDgomperz, HDweibull)[2])
HDrichards_RSS <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[1, 2]
HDlogistic_RSS <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[2, 2]
HDweibull_RSS <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[3, 2]
HDgomperz_RSS <- anova(HDrichards, HDlogistic, HDweibull, HDgomperz)[4, 2]
# Filter the model providing the best fit by AIC
HDrichards_AIC <- AIC(HDrichards, HDlogistic, HDweibull, HDgomperz)[1,2]
HDlogistic_AIC <- AIC(HDrichards, HDlogistic, HDweibull, HDgomperz)[2,2]
HDweibull_AIC <- AIC(HDrichards, HDlogistic, HDweibull, HDgomperz)[3,2]
HDgomperz_AIC <- AIC(HDrichards, HDlogistic, HDweibull, HDgomperz)[4,2]
legend("left",
cex = 1.5, bty = "n",
legend = c(
"Equation", "HDrichards", "HDlogistic", "HDweibull", "HDgomperz",
"a",round(summary(HDrichards)$parameters[1], 3),
round(summary(HDlogistic)$parameters[1], 3),
round(summary(HDweibull)$parameters[1], 3),
round(summary(HDgomperz)$parameters[1], 3),
"b", round(summary(HDrichards)$parameters[2], 3),
round(summary(HDlogistic)$parameters[2], 3),
round(summary(HDweibull)$parameters[2], 3),
round(summary(HDgomperz)$parameters[2], 3),
"c",round(summary(HDrichards)$parameters[3], 3),
round(summary(HDlogistic)$parameters[3], 3),
round(summary(HDweibull)$parameters[3], 3),
round(summary(HDgomperz)$parameters[3], 3),
"R2", round(R2_richards, 3), round(R2_logistic, 3),
round(R2_weibull, 3), round(R2_gomperz, 3),
"RSS",round(HDrichards_RSS, 3), round(HDlogistic_RSS, 3),
round(HDweibull_RSS, 3), round(HDgomperz_RSS, 3),
"AIC",round(HDrichards_AIC, 3), round(HDlogistic_AIC, 3),
round(HDweibull_AIC, 3), round(HDgomperz_AIC, 3),
"logLik",round(logLik(HDrichards), 3), round(logLik(HDlogistic), 3),
round(logLik(HDweibull), 3), round(logLik(HDgomperz), 3)),
title = "Fitted statistics of HDmodel", title.font = 2,
ncol = 8, text.width = c(1.6,0.75,0.75,0.75,0.75,0.75,0.75,0.75))
}
# Whether to call the HDmodel graph
if (HDmodel == TRUE) {
allomHD()
}
return(output)
}
stemanalysism(xtree = 4, stemgrowth = TRUE, stemdata = stemdata)
stemanalysism(xtree = 1, stemgrowth = TRUE, stemdata = stemdata)
stemanalysism(xtree = 4, treecarbon = TRUE, stemdata = stemdata,
allompardata = allomPardata)
stemanalysism(xtree = 4, treecarbon = TRUE, stemdata = stemdata,
volumepardata = volumePardata)
stemanalysism(xtree = 4, HDmodel = TRUE, stemdata = stemdata)
result1 <- stemanalysism(xtree = 4, stemgrowth = TRUE, HDmodel = TRUE,
treecarbon = TRUE, stemdata = stemdata,
volumepardata = volumePardata, allompardata = allomPardata)
devtools::load_all()
rm(list = c("stemanalysism"))
devtools::load_all()
devtools::document()
library(testthat)
library(StemAnalysis)
test_that("stem growth analysis", {
path <- system.file(stemdata, package = "StemAnalysis")
result1 <- stemanalysism(xtree = 4, stemgrowth = TRUE, stemdata = stemdata)
result2 <- stemanalysism(xtree = 6, stemgrowth = TRUE, stemdata = stemdata)
expect_type(result1, "list")
expect_type(result2, "list")
})
test_that("estimation of tree biomass and carbon storage", {
path <- system.file(stemdata, package = "StemAnalysis")
path1 <- system.file(allomPardata, package = "StemAnalysis")
result1 <- stemanalysism(xtree = 4, treecarbon = TRUE, stemdata = stemdata,
allompardata = allomPardata)
result2 <- stemanalysism(xtree = 6, treecarbon = TRUE, stemdata = stemdata,
allompardata = allomPardata)
expect_type(result1, "list")
expect_type(result2, "list")
})
devtools::check()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::kable(volumecarbon[, 12:20])
volumecarbon <- stemanalysism(xtree = 8, treecarbon = TRUE, stemdata = stemdata, volumepardata = volumePardata)
knitr::kable(volumecarbon[, 12:20])
devtools::build_vignettes()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
library(StemAnalysis)
devtools::build_manual()
devtools::build_vignettes()
Sys.getenv("PATH")
Sys.setenv(PATH=paste(
Sys.getenv("PATH"),
"C:\Users\Wu\AppData\Local\Programs\MiKTeX\miktex\bin\x64",
Sys.getenv("PATH")
Sys.setenv(PATH=paste(
Sys.getenv("PATH"),
"C:\\Users\\Wu\\AppData\\Local\\Programs\\MiKTeX\\miktex\\bin\\x64",
sep=.Platform$path.sep)
)
devtools::check(manual=TRUE)
devtools::check()
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
devtools::build_manual()
